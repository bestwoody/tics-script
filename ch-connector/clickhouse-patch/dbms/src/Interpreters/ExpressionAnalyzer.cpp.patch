diff --git a/dbms/src/Interpreters/ExpressionAnalyzer.cpp b/dbms/src/Interpreters/ExpressionAnalyzer.cpp
index b144b04..000459a 100644
--- a/dbms/src/Interpreters/ExpressionAnalyzer.cpp
+++ b/dbms/src/Interpreters/ExpressionAnalyzer.cpp
@@ -40,6 +40,8 @@
 #include <Storages/StorageMemory.h>
 #include <Storages/StorageSet.h>
 #include <Storages/StorageJoin.h>
+#include <Storages/StorageMergeTree.h>
+#include <Storages/MutableSupport.h>
 
 #include <DataStreams/LazyBlockInputStream.h>
 #include <DataStreams/copyData.h>
@@ -59,7 +61,6 @@
 #include <DataTypes/DataTypeFunction.h>
 #include <Functions/FunctionsMiscellaneous.h>
 
-
 namespace DB
 {
 
@@ -1096,6 +1097,20 @@ void ExpressionAnalyzer::normalizeTreeImpl(
     }
     else if (ASTExpressionList * node = typeid_cast<ASTExpressionList *>(ast.get()))
     {
+        // Get hidden column names of mutable storage
+        OrderedNameSet filtered_names;
+        {
+            StoragePtr table = getTable();
+            if (table != nullptr)
+            {
+                if (table->getName() == MutableSupport::storage_name && select_query && !select_query->raw_for_mutable)
+                {
+                    // LOG_DEBUG(&Logger::get("ExpressionAnalyzer"), "Filter hidden columns for mutable table.");
+                    filtered_names = MutableSupport::instance().hiddenColumns(table->getName());
+                }
+            }
+        }
+
         /// Replace * with a list of columns.
         ASTs & asts = node->children;
         for (int i = static_cast<int>(asts.size()) - 1; i >= 0; --i)
@@ -1104,7 +1119,8 @@ void ExpressionAnalyzer::normalizeTreeImpl(
             {
                 ASTs all_columns;
                 for (const auto & column_name_type : columns)
-                    all_columns.emplace_back(std::make_shared<ASTIdentifier>(asterisk->range, column_name_type.name));
+                    if (!filtered_names.has(column_name_type.name))
+                        all_columns.emplace_back(std::make_shared<ASTIdentifier>(asterisk->range, column_name_type.name));
 
                 asts.erase(asts.begin() + i);
                 asts.insert(asts.begin() + i, all_columns.begin(), all_columns.end());
