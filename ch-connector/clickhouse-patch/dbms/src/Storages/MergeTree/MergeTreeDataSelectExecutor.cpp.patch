diff --git a/dbms/src/Storages/MergeTree/MergeTreeDataSelectExecutor.cpp b/dbms/src/Storages/MergeTree/MergeTreeDataSelectExecutor.cpp
index 1766f60..bde5af6 100644
--- a/dbms/src/Storages/MergeTree/MergeTreeDataSelectExecutor.cpp
+++ b/dbms/src/Storages/MergeTree/MergeTreeDataSelectExecutor.cpp
@@ -7,10 +7,14 @@
 #include <Storages/MergeTree/MergeTreeReadPool.h>
 #include <Storages/MergeTree/MergeTreeThreadBlockInputStream.h>
 #include <Storages/MergeTree/PKCondition.h>
+
+#include <Storages/MutableSupport.h>
+
 #include <Parsers/ASTIdentifier.h>
 #include <Parsers/ASTFunction.h>
 #include <Parsers/ASTSampleRatio.h>
 
+
 /// Allow to use __uint128_t as a template parameter for boost::rational.
 // https://stackoverflow.com/questions/41198673/uint128-t-not-working-with-clang-and-libstdc
 #if !defined(__GLIBCXX_BITSIZE_INT_N_0) && defined(__SIZEOF_INT128__)
@@ -510,43 +514,73 @@ BlockInputStreams MergeTreeDataSelectExecutor::read(
             CreatingSetsBlockInputStream(std::make_shared<NullBlockInputStream>(), prewhere_subqueries, settings.limits).read();
     }
 
+    bool is_mutable_engine = (data.merging_params.mode == MergeTreeData::MergingParams::Mutable && !select.raw_for_mutable);
+
     RangesInDataParts parts_with_ranges;
 
-    /// Let's find what range to read from each part.
-    size_t sum_marks = 0;
-    size_t sum_ranges = 0;
-    for (auto & part : parts)
+    if (!is_mutable_engine)
     {
-        RangesInDataPart ranges(part, part_index++);
+        /// Let's find what range to read from each part.
+        size_t sum_marks = 0;
+        size_t sum_ranges = 0;
+        for (auto & part : parts)
+        {
+            RangesInDataPart ranges(part, part_index++);
 
-        if (data.merging_params.mode != MergeTreeData::MergingParams::Unsorted)
-            ranges.ranges = markRangesFromPKRange(part->index, key_condition, settings);
-        else
-            ranges.ranges = MarkRanges{MarkRange{0, part->marks_count}};
+            if (data.merging_params.mode != MergeTreeData::MergingParams::Unsorted)
+                ranges.ranges = markRangesFromPKRange(part->index, key_condition, settings);
+            else
+                ranges.ranges = MarkRanges{MarkRange{0, part->marks_count}};
 
-        if (!ranges.ranges.empty())
-        {
-            parts_with_ranges.push_back(ranges);
+            if (!ranges.ranges.empty())
+            {
+                parts_with_ranges.push_back(ranges);
 
-            sum_ranges += ranges.ranges.size();
-            for (const auto & range : ranges.ranges)
-                sum_marks += range.end - range.begin;
+                sum_ranges += ranges.ranges.size();
+                for (const auto & range : ranges.ranges)
+                    sum_marks += range.end - range.begin;
+            }
         }
-    }
 
-    LOG_DEBUG(log, "Selected " << parts.size() << " parts by date, " << parts_with_ranges.size() << " parts by key, "
-        << sum_marks << " marks to read from " << sum_ranges << " ranges");
+        LOG_DEBUG(log, "Selected " << parts.size() << " parts by date, " << parts_with_ranges.size() << " parts by key, "
+            << sum_marks << " marks to read from " << sum_ranges << " ranges");
 
-    if (parts_with_ranges.empty())
-        return {};
+        if (parts_with_ranges.empty())
+            return {};
 
-    ProfileEvents::increment(ProfileEvents::SelectedParts, parts_with_ranges.size());
-    ProfileEvents::increment(ProfileEvents::SelectedRanges, sum_ranges);
-    ProfileEvents::increment(ProfileEvents::SelectedMarks, sum_marks);
+        ProfileEvents::increment(ProfileEvents::SelectedParts, parts_with_ranges.size());
+        ProfileEvents::increment(ProfileEvents::SelectedRanges, sum_ranges);
+        ProfileEvents::increment(ProfileEvents::SelectedMarks, sum_marks);
+    }
 
     BlockInputStreams res;
 
-    if (select.final())
+    if (is_mutable_engine)
+    {
+        column_names_to_read.insert(column_names_to_read.end(), MutableSupport::version_column_name);
+        column_names_to_read.insert(column_names_to_read.end(), MutableSupport::delmark_column_name);
+
+        std::vector<String> add_columns = data.getPrimaryExpression()->getRequiredColumns();
+        column_names_to_read.insert(column_names_to_read.end(), add_columns.begin(), add_columns.end());
+
+        std::sort(column_names_to_read.begin(), column_names_to_read.end());
+        column_names_to_read.erase(std::unique(column_names_to_read.begin(), column_names_to_read.end()), column_names_to_read.end());
+
+        res = spreadMarkRangesAmongStreamsOnMutableEngine(
+            parts,
+            key_condition,
+            column_names_to_read,
+            max_block_size,
+            settings.use_uncompressed_cache,
+            prewhere_actions,
+            prewhere_column,
+            virt_column_names,
+            settings);
+
+        if (res.size() == 0)
+            return res;
+    }
+    else if (select.final())
     {
         /// Add columns needed to calculate primary key and the sign.
         std::vector<String> add_columns = data.getPrimaryExpression()->getRequiredColumns();
@@ -823,6 +857,9 @@ BlockInputStreams MergeTreeDataSelectExecutor::spreadMarkRangesAmongStreamsFinal
                     data.getSortDescription(), data.merging_params.version_column, max_block_size);
                 break;
 
+            case MergeTreeData::MergingParams::Mutable:
+                throw Exception("MutableMergeTree doesn't handle here", ErrorCodes::LOGICAL_ERROR);
+
             case MergeTreeData::MergingParams::Unsorted:
                 throw Exception("UnsortedMergeTree doesn't support FINAL", ErrorCodes::LOGICAL_ERROR);
 
@@ -837,6 +874,82 @@ BlockInputStreams MergeTreeDataSelectExecutor::spreadMarkRangesAmongStreamsFinal
 }
 
 
+BlockInputStreams MergeTreeDataSelectExecutor::spreadMarkRangesAmongStreamsOnMutableEngine(
+    MergeTreeData::DataPartsVector & parts,
+    const PKCondition & key_condition,
+    const Names & column_names,
+    size_t max_block_size,
+    bool use_uncompressed_cache,
+    ExpressionActionsPtr prewhere_actions,
+    const String & prewhere_column,
+    const Names & virt_columns,
+    const Settings & settings) const
+{
+    RangesInDataParts parts_with_ranges;
+
+    size_t part_index = 0;
+    size_t sum_marks = 0;
+    size_t sum_ranges = 0;
+    for (auto & part : parts)
+    {
+        RangesInDataPart ranges(part, part_index++);
+
+        if (data.merging_params.mode != MergeTreeData::MergingParams::Unsorted)
+            ranges.ranges = markRangesFromPKRange(part->index, key_condition, settings);
+        else
+            ranges.ranges = MarkRanges{MarkRange{0, part->marks_count}};
+
+        if (!ranges.ranges.empty())
+        {
+            parts_with_ranges.push_back(ranges);
+
+            sum_ranges += ranges.ranges.size();
+            for (const auto & range : ranges.ranges)
+                sum_marks += range.end - range.begin;
+        }
+    }
+
+    LOG_DEBUG(log, "On mutable engine selected " << parts.size() << " parts by date, " << parts_with_ranges.size() << " parts by key, "
+        << sum_marks << " marks to read from " << sum_ranges << " ranges");
+
+    if (parts_with_ranges.empty())
+        return {};
+
+    ProfileEvents::increment(ProfileEvents::SelectedParts, parts_with_ranges.size());
+    ProfileEvents::increment(ProfileEvents::SelectedRanges, sum_ranges);
+    ProfileEvents::increment(ProfileEvents::SelectedMarks, sum_marks);
+
+    const size_t max_marks_to_use_cache =
+        (settings.merge_tree_max_rows_to_use_cache + data.index_granularity - 1) / data.index_granularity;
+
+    // TODO: Check and remove this
+    sum_marks = 0;
+    for (size_t i = 0; i < parts_with_ranges.size(); ++i)
+        for (size_t j = 0; j < parts_with_ranges[i].ranges.size(); ++j)
+            sum_marks += parts_with_ranges[i].ranges[j].end - parts_with_ranges[i].ranges[j].begin;
+    LOG_DEBUG(log, "On mutable engine selected " << sum_marks << " marks to read");
+
+    if (sum_marks > max_marks_to_use_cache)
+        use_uncompressed_cache = false;
+
+    BlockInputStreams res;
+    for (size_t part_index = 0; part_index < parts_with_ranges.size(); ++part_index)
+    {
+        RangesInDataPart & part = parts_with_ranges[part_index];
+
+        BlockInputStreamPtr source_stream = std::make_shared<MergeTreeBlockInputStream>(
+            data, part.data_part, max_block_size, settings.preferred_block_size_bytes,
+            settings.preferred_max_column_in_block_size_bytes, column_names, part.ranges, use_uncompressed_cache,
+            prewhere_actions, prewhere_column, true, settings.min_bytes_to_use_direct_io, settings.max_read_buffer_size, true,
+            virt_columns, part.part_index_in_query);
+
+        res.emplace_back(std::make_shared<ExpressionBlockInputStream>(source_stream, data.getPrimaryExpression()));
+    }
+
+    return res;
+}
+
+
 void MergeTreeDataSelectExecutor::createPositiveSignCondition(
     ExpressionActionsPtr & out_expression, String & out_column, const Context & context) const
 {
