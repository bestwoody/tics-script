diff --git a/dbms/src/Storages/MergeTree/MergeTreeDataSelectExecutor.cpp b/dbms/src/Storages/MergeTree/MergeTreeDataSelectExecutor.cpp
index 1766f60..1498f3d 100644
--- a/dbms/src/Storages/MergeTree/MergeTreeDataSelectExecutor.cpp
+++ b/dbms/src/Storages/MergeTree/MergeTreeDataSelectExecutor.cpp
@@ -7,10 +7,14 @@
 #include <Storages/MergeTree/MergeTreeReadPool.h>
 #include <Storages/MergeTree/MergeTreeThreadBlockInputStream.h>
 #include <Storages/MergeTree/PKCondition.h>
+
+#include <Storages/MutableSupport.h>
+
 #include <Parsers/ASTIdentifier.h>
 #include <Parsers/ASTFunction.h>
 #include <Parsers/ASTSampleRatio.h>
 
+
 /// Allow to use __uint128_t as a template parameter for boost::rational.
 // https://stackoverflow.com/questions/41198673/uint128-t-not-working-with-clang-and-libstdc
 #if !defined(__GLIBCXX_BITSIZE_INT_N_0) && defined(__SIZEOF_INT128__)
@@ -37,6 +41,7 @@ namespace std
 #include <DataStreams/NullBlockInputStream.h>
 #include <DataStreams/SummingSortedBlockInputStream.h>
 #include <DataStreams/ReplacingSortedBlockInputStream.h>
+#include <DataStreams/InBlockDedupBlockInputStream.h>
 #include <DataStreams/AggregatingSortedBlockInputStream.h>
 #include <DataTypes/DataTypesNumber.h>
 #include <DataTypes/DataTypeDate.h>
@@ -546,6 +551,12 @@ BlockInputStreams MergeTreeDataSelectExecutor::read(
 
     BlockInputStreams res;
 
+    if (data.merging_params.mode == MergeTreeData::MergingParams::Mutable && !select.raw_for_mutable)
+    {
+        column_names_to_read.insert(column_names_to_read.end(), MutableSupport::version_column_name);
+        column_names_to_read.insert(column_names_to_read.end(), MutableSupport::delmark_column_name);
+    }
+
     if (select.final())
     {
         /// Add columns needed to calculate primary key and the sign.
@@ -565,6 +576,7 @@ BlockInputStreams MergeTreeDataSelectExecutor::read(
             column_names_to_read,
             max_block_size,
             settings.use_uncompressed_cache,
+            select,
             prewhere_actions,
             prewhere_column,
             virt_column_names,
@@ -573,12 +585,21 @@ BlockInputStreams MergeTreeDataSelectExecutor::read(
     }
     else
     {
+        if (data.merging_params.mode == MergeTreeData::MergingParams::Mutable && !select.raw_for_mutable)
+        {
+            std::vector<String> add_columns = data.getPrimaryExpression()->getRequiredColumns();
+            column_names_to_read.insert(column_names_to_read.end(), add_columns.begin(), add_columns.end());
+            std::sort(column_names_to_read.begin(), column_names_to_read.end());
+            column_names_to_read.erase(std::unique(column_names_to_read.begin(), column_names_to_read.end()), column_names_to_read.end());
+        }
+
         res = spreadMarkRangesAmongStreams(
             std::move(parts_with_ranges),
             num_streams,
             column_names_to_read,
             max_block_size,
             settings.use_uncompressed_cache,
+            select,
             prewhere_actions,
             prewhere_column,
             virt_column_names,
@@ -605,6 +626,7 @@ BlockInputStreams MergeTreeDataSelectExecutor::spreadMarkRangesAmongStreams(
     const Names & column_names,
     size_t max_block_size,
     bool use_uncompressed_cache,
+    ASTSelectQuery & select,
     ExpressionActionsPtr prewhere_actions,
     const String & prewhere_column,
     const Names & virt_columns,
@@ -738,6 +760,12 @@ BlockInputStreams MergeTreeDataSelectExecutor::spreadMarkRangesAmongStreams(
             throw Exception("Couldn't spread marks among streams", ErrorCodes::LOGICAL_ERROR);
     }
 
+    // TODO: Move to writing
+    if (data.merging_params.mode == MergeTreeData::MergingParams::Mutable && !select.raw_for_mutable)
+        for (size_t i = 0; i < res.size(); ++i)
+            res[i] = std::make_shared<ReplacingSortedBlockInputStream>(BlockInputStreams(1, res[i]),
+                 data.getSortDescription(), MutableSupport::version_column_name, max_block_size, nullptr, true);
+
     return res;
 }
 
@@ -746,6 +774,7 @@ BlockInputStreams MergeTreeDataSelectExecutor::spreadMarkRangesAmongStreamsFinal
     const Names & column_names,
     size_t max_block_size,
     bool use_uncompressed_cache,
+    ASTSelectQuery & select,
     ExpressionActionsPtr prewhere_actions,
     const String & prewhere_column,
     const Names & virt_columns,
@@ -794,6 +823,12 @@ BlockInputStreams MergeTreeDataSelectExecutor::spreadMarkRangesAmongStreamsFinal
         }
         else
             res = to_merge;
+
+        // TODO: Move to writing
+        if (data.merging_params.mode == MergeTreeData::MergingParams::Mutable && !select.raw_for_mutable)
+            for (size_t i = 0; i < res.size(); ++i)
+                res[i] = std::make_shared<ReplacingSortedBlockInputStream>(BlockInputStreams(1, res[i]),
+                     data.getSortDescription(), MutableSupport::version_column_name, max_block_size, nullptr, true);
     }
     else if (to_merge.size() > 1)
     {
@@ -818,11 +853,16 @@ BlockInputStreams MergeTreeDataSelectExecutor::spreadMarkRangesAmongStreamsFinal
                 merged = std::make_shared<AggregatingSortedBlockInputStream>(to_merge, data.getSortDescription(), max_block_size);
                 break;
 
-            case MergeTreeData::MergingParams::Replacing:    /// TODO Make ReplacingFinalBlockInputStream
+            case MergeTreeData::MergingParams::Replacing:
                 merged = std::make_shared<ReplacingSortedBlockInputStream>(to_merge,
                     data.getSortDescription(), data.merging_params.version_column, max_block_size);
                 break;
 
+            case MergeTreeData::MergingParams::Mutable:
+                merged = std::make_shared<ReplacingSortedBlockInputStream>(to_merge,
+                     data.getSortDescription(), MutableSupport::version_column_name, max_block_size, nullptr, true);
+                break;
+
             case MergeTreeData::MergingParams::Unsorted:
                 throw Exception("UnsortedMergeTree doesn't support FINAL", ErrorCodes::LOGICAL_ERROR);
 
