diff --git a/dbms/src/Storages/MergeTree/MergeTreeDataSelectExecutor.cpp b/dbms/src/Storages/MergeTree/MergeTreeDataSelectExecutor.cpp
index 1766f60..817260f 100644
--- a/dbms/src/Storages/MergeTree/MergeTreeDataSelectExecutor.cpp
+++ b/dbms/src/Storages/MergeTree/MergeTreeDataSelectExecutor.cpp
@@ -7,10 +7,14 @@
 #include <Storages/MergeTree/MergeTreeReadPool.h>
 #include <Storages/MergeTree/MergeTreeThreadBlockInputStream.h>
 #include <Storages/MergeTree/PKCondition.h>
+
+#include <Storages/MutableSupport.h>
+
 #include <Parsers/ASTIdentifier.h>
 #include <Parsers/ASTFunction.h>
 #include <Parsers/ASTSampleRatio.h>
 
+
 /// Allow to use __uint128_t as a template parameter for boost::rational.
 // https://stackoverflow.com/questions/41198673/uint128-t-not-working-with-clang-and-libstdc
 #if !defined(__GLIBCXX_BITSIZE_INT_N_0) && defined(__SIZEOF_INT128__)
@@ -546,7 +550,15 @@ BlockInputStreams MergeTreeDataSelectExecutor::read(
 
     BlockInputStreams res;
 
-    if (select.final())
+    bool is_mutable_engine = (data.merging_params.mode == MergeTreeData::MergingParams::Mutable && !select.raw_for_mutable);
+
+    if (is_mutable_engine)
+    {
+        column_names_to_read.insert(column_names_to_read.end(), MutableSupport::version_column_name);
+        column_names_to_read.insert(column_names_to_read.end(), MutableSupport::delmark_column_name);
+    }
+
+    if (select.final() || is_mutable_engine)
     {
         /// Add columns needed to calculate primary key and the sign.
         std::vector<String> add_columns = data.getPrimaryExpression()->getRequiredColumns();
@@ -564,6 +576,7 @@ BlockInputStreams MergeTreeDataSelectExecutor::read(
             std::move(parts_with_ranges),
             column_names_to_read,
             max_block_size,
+            is_mutable_engine,
             settings.use_uncompressed_cache,
             prewhere_actions,
             prewhere_column,
@@ -745,6 +758,7 @@ BlockInputStreams MergeTreeDataSelectExecutor::spreadMarkRangesAmongStreamsFinal
     RangesInDataParts && parts,
     const Names & column_names,
     size_t max_block_size,
+    bool is_mutable_engine,
     bool use_uncompressed_cache,
     ExpressionActionsPtr prewhere_actions,
     const String & prewhere_column,
@@ -781,7 +795,7 @@ BlockInputStreams MergeTreeDataSelectExecutor::spreadMarkRangesAmongStreamsFinal
     }
 
     BlockInputStreams res;
-    if (to_merge.size() == 1)
+    if (to_merge.size() == 1 && !is_mutable_engine)
     {
         if (!data.merging_params.sign_column.empty())
         {
@@ -795,7 +809,7 @@ BlockInputStreams MergeTreeDataSelectExecutor::spreadMarkRangesAmongStreamsFinal
         else
             res = to_merge;
     }
-    else if (to_merge.size() > 1)
+    else if (to_merge.size() >= 1)
     {
         BlockInputStreamPtr merged;
 
@@ -823,6 +837,16 @@ BlockInputStreams MergeTreeDataSelectExecutor::spreadMarkRangesAmongStreamsFinal
                     data.getSortDescription(), data.merging_params.version_column, max_block_size);
                 break;
 
+            case MergeTreeData::MergingParams::Mutable:
+                if (MutableSupport::in_block_deduped_before_decup_calculator)
+                {
+                    // TODO: Move to writing.
+                    // Sorted and deduplicated
+                    merged = std::make_shared<ReplacingSortedBlockInputStream>(to_merge,
+                        data.getSortDescription(), data.merging_params.version_column, max_block_size, nullptr, true);
+                }
+                break;
+
             case MergeTreeData::MergingParams::Unsorted:
                 throw Exception("UnsortedMergeTree doesn't support FINAL", ErrorCodes::LOGICAL_ERROR);
 
@@ -830,7 +854,10 @@ BlockInputStreams MergeTreeDataSelectExecutor::spreadMarkRangesAmongStreamsFinal
                 throw Exception("GraphiteMergeTree doesn't support FINAL", ErrorCodes::LOGICAL_ERROR);
         }
 
-        res.emplace_back(merged);
+        if (merged)
+            res.emplace_back(merged);
+        else
+            res = to_merge;
     }
 
     return res;
