diff --git a/dbms/src/Common/FieldVisitors.h b/dbms/src/Common/FieldVisitors.h
index b59c6a47aa76..14fa4e83b850 100644
--- a/dbms/src/Common/FieldVisitors.h
+++ b/dbms/src/Common/FieldVisitors.h
@@ -43,6 +43,7 @@ typename std::decay_t<Visitor>::ResultType applyVisitor(Visitor && visitor, F &&
         case Field::Types::String:  return visitor(field.template get<String>());
         case Field::Types::Array:   return visitor(field.template get<Array>());
         case Field::Types::Tuple:   return visitor(field.template get<Tuple>());
+        case Field::Types::Decimal:   return visitor(field.template get<DecimalValue>());
 
         default:
             throw Exception("Bad type of Field", ErrorCodes::BAD_TYPE_OF_FIELD);
@@ -112,6 +113,7 @@ public:
     String operator() (const String & x) const;
     String operator() (const Array & x) const;
     String operator() (const Tuple & x) const;
+    String operator() (const DecimalValue & x) const;
 };
 
 
@@ -126,6 +128,7 @@ public:
     String operator() (const String & x) const;
     String operator() (const Array & x) const;
     String operator() (const Tuple & x) const;
+    String operator() (const DecimalValue & x) const;
 };
 
 
@@ -157,6 +160,7 @@ public:
     T operator() (const UInt64 & x) const { return x; }
     T operator() (const Int64 & x) const { return x; }
     T operator() (const Float64 & x) const { return x; }
+    T operator() (const DecimalValue & x) const { return x; }
 };
 
 
@@ -174,6 +178,7 @@ public:
     void operator() (const Float64 & x) const;
     void operator() (const String & x) const;
     void operator() (const Array & x) const;
+    void operator() (const DecimalValue & x) const;
 };
 
 
@@ -314,6 +319,7 @@ public:
     bool operator() (UInt64 & x) const { x += get<UInt64>(rhs); return x != 0; }
     bool operator() (Int64 & x) const { x += get<Int64>(rhs); return x != 0; }
     bool operator() (Float64 & x) const { x += get<Float64>(rhs); return x != 0; }
+    bool operator() (DecimalValue & x) const { x += get<DecimalValue>(rhs); return x.value != 0; }
 
     bool operator() (Null &) const { throw Exception("Cannot sum Nulls", ErrorCodes::LOGICAL_ERROR); }
     bool operator() (String &) const { throw Exception("Cannot sum Strings", ErrorCodes::LOGICAL_ERROR); }
