diff --git a/dbms/src/Storages/MergeTree/MergeTreeDataPart.cpp b/dbms/src/Storages/MergeTree/MergeTreeDataPart.cpp
index 26f7c2c44931..60c24d0ba0c2 100644
--- a/dbms/src/Storages/MergeTree/MergeTreeDataPart.cpp
+++ b/dbms/src/Storages/MergeTree/MergeTreeDataPart.cpp
@@ -9,6 +9,7 @@
 #include <IO/WriteBufferFromString.h>
 #include <IO/ReadBufferFromFile.h>
 #include <IO/HashingWriteBuffer.h>
+#include <IO/CompactContext.h>
 #include <Core/Defines.h>
 #include <Common/SipHash.h>
 #include <Common/escapeForFileName.h>
@@ -36,6 +37,7 @@ namespace ErrorCodes
     extern const int CORRUPTED_DATA;
     extern const int NOT_FOUND_EXPECTED_DATA_PART;
     extern const int BAD_SIZE_OF_FILE_IN_DATA_PART;
+    extern const int BAD_DATA_PART_NAME;
 }
 
 
@@ -390,8 +392,13 @@ void MergeTreeDataPart::renameAddPrefix(bool to_detached, const String & prefix)
 }
 
 
+void MergeTreeDataPart::tryToGetCompactCtx() {
+    compactCtxPtr = CompactContextFactory::tryToGetCompactReadCtxPtr(getFullPath());
+}
+
 void MergeTreeDataPart::loadColumnsChecksumsIndexes(bool require_columns_checksums, bool check_consistency)
 {
+    tryToGetCompactCtx();
     loadColumns(require_columns_checksums);
     loadChecksums(require_columns_checksums);
     loadIndex();
@@ -409,8 +416,12 @@ void MergeTreeDataPart::loadIndex()
         if (columns.empty())
             throw Exception("No columns in part " + name, ErrorCodes::NO_FILE_IN_DATA_PART);
 
-        marks_count = Poco::File(getFullPath() + escapeForFileName(columns.front().name) + ".mrk")
-            .getSize() / MERGE_TREE_MARK_SIZE;
+        if (compactCtxPtr != nullptr) {
+            marks_count = compactCtxPtr -> getMarksCount() / MERGE_TREE_MARK_SIZE;
+        }
+        else
+            marks_count = Poco::File(getFullPath() + escapeForFileName(columns.front().name) + ".mrk")
+                .getSize() / MERGE_TREE_MARK_SIZE;
     }
 
     size_t key_size = storage.primary_sort_descr.size();
@@ -450,7 +461,18 @@ void MergeTreeDataPart::loadIndex()
 
 void MergeTreeDataPart::loadPartitionAndMinMaxIndex()
 {
-    if (storage.format_version < MERGE_TREE_DATA_MIN_FORMAT_VERSION_WITH_CUSTOM_PARTITIONING)
+    if (storage.merging_params.mode == MergeTreeData::MergingParams::Mutable)
+    {
+        UInt32 partition_name = 0;
+        ReadBufferFromString in(name);
+        if (!tryReadIntText(partition_name, in))
+            throw Exception("Unexpected part name: " + name, ErrorCodes::BAD_DATA_PART_NAME);
+
+        String full_path = getFullPath();
+        partition = MergeTreePartition(partition_name);
+        minmax_idx.load(storage, full_path);
+    }
+    else if (storage.format_version < MERGE_TREE_DATA_MIN_FORMAT_VERSION_WITH_CUSTOM_PARTITIONING)
     {
         DayNum_t min_date;
         DayNum_t max_date;
@@ -506,6 +528,16 @@ void MergeTreeDataPart::loadRowsCount()
     {
         size_t rows_approx = storage.index_granularity * marks_count;
 
+        if (compactCtxPtr != nullptr) {
+            rows_count = compactCtxPtr->rows_count;
+            if (!(rows_count <= rows_approx && rows_approx < rows_count + storage.index_granularity))
+                throw Exception(
+                    "Unexpected size of compact file : " + toString(rows_count) + " rows, expected "
+                    + toString(rows_approx) + "+-" + toString(storage.index_granularity) + " rows according to the index",
+                    ErrorCodes::LOGICAL_ERROR);
+            return;
+        }
+
         for (const NameAndTypePair & column : columns)
         {
             ColumnPtr column_col = column.type->createColumn();
@@ -600,6 +632,13 @@ void MergeTreeDataPart::checkConsistency(bool require_part_metadata)
                 name_type.type->enumerateStreams([&](const IDataType::SubstreamPath & substream_path)
                 {
                     String file_name = IDataType::getFileNameForStream(name_type.name, substream_path);
+                    if (compactCtxPtr != nullptr) {
+                        String compact_file_name = compactCtxPtr -> compact_path;
+                        if (!checksums.files.count(compact_file_name))
+                            throw Exception("No " + compact_file_name + " file checksum for column " + name + " in part " + path,
+                                ErrorCodes::NO_FILE_IN_DATA_PART);
+                        return;
+                    }
                     String mrk_file_name = file_name + ".mrk";
                     String bin_file_name = file_name + ".bin";
                     if (!checksums.files.count(mrk_file_name))
@@ -691,6 +730,12 @@ bool MergeTreeDataPart::hasColumnFiles(const String & column) const
     String prefix = getFullPath();
 
     String escaped_column = escapeForFileName(column);
+
+    CompactReadContextPtr compactCtxPtr = CompactContextFactory::tryToGetCompactReadCtxPtr(prefix);
+    if (compactCtxPtr != nullptr) {
+        return compactCtxPtr -> hasColumn(escaped_column);
+    }
+
     return Poco::File(prefix + escaped_column + ".bin").exists()
         && Poco::File(prefix + escaped_column + ".mrk").exists();
 }
