diff --git a/dbms/src/DataStreams/SquashingTransform.cpp b/dbms/src/DataStreams/SquashingTransform.cpp
index d31ff6f80634..2f67ba8796fc 100644
--- a/dbms/src/DataStreams/SquashingTransform.cpp
+++ b/dbms/src/DataStreams/SquashingTransform.cpp
@@ -1,4 +1,5 @@
 #include <DataStreams/SquashingTransform.h>
+#include <common/logger_useful.h>
 
 
 namespace DB
@@ -6,7 +7,9 @@ namespace DB
 
 SquashingTransform::SquashingTransform(size_t min_block_size_rows, size_t min_block_size_bytes)
     : min_block_size_rows(min_block_size_rows), min_block_size_bytes(min_block_size_bytes)
+    , log(&Logger::get("SquashingTransform"))
 {
+    LOG_DEBUG(log, "Squashing config - min_block_size_rows: " << min_block_size_rows << " min_block_size_bytes: " << min_block_size_bytes);
 }
 
 
@@ -15,9 +18,13 @@ SquashingTransform::Result SquashingTransform::add(Block && block)
     if (!block)
         return Result(std::move(accumulated_block));
 
+    auto block_rows = block.rows();
+    auto block_bytes = block.bytes();
+
     /// Just read block is alredy enough.
-    if (isEnoughSize(block.rows(), block.bytes()))
+    if (isEnoughSize(block_rows, block_bytes))
     {
+        LOG_DEBUG(log, "Block size enough - rows: " << block_rows << " bytes: " << block_bytes);
         /// If no accumulated data, return just read block.
         if (!accumulated_block)
             return Result(std::move(block));
@@ -27,9 +34,13 @@ SquashingTransform::Result SquashingTransform::add(Block && block)
         return Result(std::move(block));
     }
 
+    auto accumulated_block_rows = accumulated_block.rows();
+    auto accumulated_block_bytes = accumulated_block.bytes();
+
     /// Accumulated block is already enough.
-    if (accumulated_block && isEnoughSize(accumulated_block.rows(), accumulated_block.bytes()))
+    if (accumulated_block && isEnoughSize(accumulated_block_rows, accumulated_block_bytes))
     {
+        LOG_DEBUG(log, "Accumulated block size enough - rows: " << accumulated_block_rows << " bytes: " << accumulated_block_bytes);
         /// Return accumulated data and place new block to accumulated data.
         accumulated_block.swap(block);
         return Result(std::move(block));
@@ -37,8 +48,12 @@ SquashingTransform::Result SquashingTransform::add(Block && block)
 
     append(std::move(block));
 
-    if (isEnoughSize(accumulated_block.rows(), accumulated_block.bytes()))
+    accumulated_block_rows = accumulated_block.rows();
+    accumulated_block_bytes = accumulated_block.bytes();
+
+    if (isEnoughSize(accumulated_block_rows, accumulated_block_bytes))
     {
+        LOG_DEBUG(log, "Combined block size enough - rows: " << accumulated_block_rows << " bytes: " << accumulated_block_bytes);
         Block res;
         res.swap(accumulated_block);
         return Result(std::move(res));
